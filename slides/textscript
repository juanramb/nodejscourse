==Qué es node?

-Javascript en el lado del servidor
-Unas cuantas bibliotecas en lo alto de V8, la máquina virtual de Javascript de Google Chrome
-Con un API para acceder a la red y al sistema de ficheros
-Proporciona un modelo orientado eventos con E/S asíncrona
  *metafora del rey
  *Event loop: lista de tareas asociadas a eventos

==Para qué me vale?
-Tiempos de respuesta bajos
-Alta concurrencia


==Javascript?
-por qué?
-te gusta javascript? 
  *enseñar anidamiento de callbacks vs código ruby

-pero mola porque consigues la asincronía de forma más o menos sencilla
*aunque los anidamientos de callbacks....
*scope de variables, delayed execution, closures (funciones anidadas)
==(A)sincronía?
-node te permite ser asíncrono casi sin hacer nada
  *ejemplos de qué no hacer
-callbacks
	*Son funciones que se ejecutan cuando una tarea finaliza
	*Permiten al programa mandar hacer una tarea y ejecutar cualquier otra cosa
	*De este modo se evita la espera activa en E/S
 ejemplo de callbacks en traspa
-Event Emitters
	*Un event emitter es simplemente una asociación entre un string y un callback
	*un evento se puede emitir -> se llama al callback una sola vez o varias
	*ver el on,once y el emit 
-usa las funciones asíncronas del core siempre que sea posible
	*ejemplo del readFileSync(Async)

==Algunas cosas útiles del core
-Timers
	*Hablar de como usar bien los timers con el ejemplo del setInterval y la funcion recursiva
-Streams
	*De lectura y escritura, un evento por cada trozo de datos, no al final
	*Se puede hacer pipe :)

==NPM
-para instalar módulos adicionales, tipo rubygems
==Módulos útiles
-async
==Como depurar
-node-inspector
	-v8-profiler
 un poco primitivo, pero no está mal

==Pros y contras
It's event driven. Together with closures it's very simple to imagine the client lifecycle.
You don't have to care about threads, locks and all the parallel stuff.
It's very fast (built on V8 JavaScript Engine)
For games you can write the game logic just once and then use it for both server and frontend.
It's just like any other JavaScript.
but on the other hand there are some gotchas:

It's under rapid development and your server might not be compatible with newer versions of node.js.
It's all quiet new. I haven't seen any real application of node.js. Just a bunch of games and some nice demos.
Node.js unlike Apache doesn't use processes for each connection.

==Alternativas a nodejs
	-python twisted
	-ruby EventMachine
==Docs y sitios consultados en mi periplo con node
http://nodejs.org/api
http://nodejs.org/community
http://docs.nodejitsu.com
http://book.mixu.net
http://howtonode.org
http://github.com
	*aprendiendo by example con los módulos 
http://www.nodebeginner.org
http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb
http://www.nodecloud.org/
http://nodeguide.com/
http://eloquentjavascript.net/


